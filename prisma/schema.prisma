// generator client {
//   provider = "prisma-client-js"
//   output   = "../src/generated/prisma"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // Main user model shared across all roles
// model User {
//   id              String   @id @default(cuid()) // Unique user ID
//   username        String   @unique // Unique username
//   email           String   @unique // Unique email
//   firstname       String? // Mobile number
//   lastname        String? // Mobile number
//   mobile          String // Mobile number
//   password        String // Hashed password
//   profileImg      String?  @default("https://example.com/default-profile.png") // default image URL
//   lastLoggedin    DateTime @default(now()) // Last login timestamp
//   isActive        Boolean  @default(true) // Active status
//   isVerified      Boolean  @default(false) // Verify status
//   isTermCondition Boolean  @default(false) // Term & Condition status
//   otp             String // One-time password
//   otpExpiryTime   DateTime // OTP expiration time
//   role            Role     @default(USER) // User role
//   createdAt       DateTime @default(now()) @db.Timestamp(6) // Creation timestamp
//   updatedAt       DateTime @updatedAt // Last update timestamp

//   addresses Address[] // User addresses

//   doctor        Doctor?
//   patient       Patient?
//   admin         Administrator?
//   medicineAdmin MedicineAdmin?
//   deliveryBoy   DeliveryBoy?

//   @@index([email])
//   @@index([username])
// }

// // Stores multiple addresses per user
// model Address {
//   id         String @id @default(cuid()) // Address ID
//   userId     String // FK to User
//   street     String // Street address
//   city       String // City
//   state      String // State
//   postalCode String // ZIP/postal code
//   country    String // Country

//   user User @relation(fields: [userId], references: [id])

//   @@index([userId])
// }

// // Enum for user roles
// enum Role {
//   USER
//   DOCTOR
//   PATIENT
//   ADMINISTRATOR
//   MEDICINE_ADMIN
//   DELIVERY_BOY
// }

// // Doctor-specific details
// model Doctor {
//   userId         String   @id // FK from User
//   qualification  String[] // Degrees (e.g., MBBS, MD)
//   experience     Int // Years of experience
//   specialization String // Specialty (e.g., Cardiology)
//   slotDate       DateTime // Available date
//   slotTiming     DateTime // Available time slot
//   city           String // Practice city
//   consultantFees Int // Consultation fees

//   user         User          @relation(fields: [userId], references: [id])
//   appointments Appointment[] // Appointments handled
// }

// // Patient-specific details
// model Patient {
//   userId           String   @id // FK from User
//   dob              DateTime // Age
//   gender           String // Gender
//   bloodGroup       String // Blood group
//   emergencyContact String // Emergency contact number
//   medicalHistory   Json // Medical history (illnesses, allergies, etc.)

//   user         User          @relation(fields: [userId], references: [id])
//   appointments Appointment[] // Patient's appointments
// }

// // Appointment linking doctor and patient
// model Appointment {
//   id        String            @id @default(cuid()) // Appointment ID
//   date      DateTime // Date of appointment
//   time      DateTime // Time of appointment
//   notes     String? // Optional notes
//   doctorId  String // FK to Doctor
//   patientId String // FK to Patient
//   status    AppointmentStatus @default(PENDING) // Appointment status

//   doctor  Doctor  @relation(fields: [doctorId], references: [userId])
//   patient Patient @relation(fields: [patientId], references: [userId])

//   @@index([doctorId])
//   @@index([patientId])
// }

// // Status options for appointments
// enum AppointmentStatus {
//   PENDING
//   CONFIRMED
//   COMPLETED
//   CANCELLED
// }

// // Permissions for medicine management
// model MedicineAdmin {
//   userId      String   @id // FK from User
//   permissions String[] // Permission tags (e.g., ["MANAGE_MEDICINE"])

//   user User @relation(fields: [userId], references: [id])
// }

// // Admin with full control
// model Administrator {
//   userId      String   @id // FK from User
//   permissions String[] // Admin permissions (e.g., ["FULL_ACCESS"])

//   user User @relation(fields: [userId], references: [id])
// }

// // Delivery personnel details
// model DeliveryBoy {
//   userId      String @id // FK from User
//   vehicleType String // Vehicle type (e.g., Bike, Car)
//   vehicleNo   String // Vehicle number

//   user   User    @relation(fields: [userId], references: [id])
//   orders Order[] // Orders assigned
// }

// // Order to be delivered
// model Order {
//   id            String   @id @default(cuid()) // Unique Order ID
//   orderCode     String   @unique // Human-readable order ID (e.g., "ORD-20250001")
//   description   String // Order description (e.g., "Blood Pressure Medication")
//   customerName  String // Name of the recipient
//   customerPhone String // Contact number of recipient
//   address       Json // JSON containing address fields (line1, city, pincode, etc.)
//   deliveryDate  DateTime // Scheduled delivery date/time
//   placedAt      DateTime @default(now()) // Order placement timestamp

//   deliveryStatus OrderStatus   @default(PENDING) // Current delivery status
//   paymentStatus  PaymentStatus @default(UNPAID) // Payment state
//   notes          String? // Optional delivery instructions or notes

//   deliveryBoyId String? // FK to DeliveryBoy.userId (nullable if not yet assigned)
//   deliveryBoy   DeliveryBoy? @relation(fields: [deliveryBoyId], references: [userId])

//   tracking Tracking? // One-to-one relation for real-time tracking
// }

// // Status options for Payments
// enum PaymentStatus {
//   UNPAID
//   PAID
//   REFUNDED
// }

// // Status options for delivery orders
// enum OrderStatus {
//   PENDING // Order created, not yet assigned
//   ASSIGNED // DeliveryBoy assigned
//   IN_TRANSIT // Picked up and on the way
//   DELIVERED // Successfully delivered
//   FAILED // Delivery attempt failed
//   CANCELLED // Order cancelled
// }

// // Status options for delivery orders
// model Tracking {
//   id          String   @id @default(cuid())
//   orderId     String   @unique // One-to-one with Order
//   lastUpdated DateTime @default(now())
//   location    Json // { lat: 28.6139, lng: 77.2090 }
//   statusNote  String? // Optional note like "Reached nearby"

//   order Order @relation(fields: [orderId], references: [id])
// }

// Prisma Client generator
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // Generated client path
}

// Database source
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------- ENUMS ----------

// Roles for access control
enum Role {
  USER
  DOCTOR
  PATIENT
  ADMINISTRATOR
  MEDICINE_ADMIN
  DELIVERY_BOY
}

// Appointment lifecycle status
enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

// Delivery order status
enum OrderStatus {
  PENDING
  ASSIGNED
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

// Payment lifecycle status
enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

// ---------- MODELS ----------

// Main user model shared by all roles
model User {
  id              String    @id @default(cuid()) // Primary key
  username        String    @unique // Unique login name
  email           String    @unique // Unique email
  firstName       String? // Optional first name
  lastName        String? // Optional last name
  mobile          String    @unique // Unique mobile number
  password        String // Hashed password
  profileImg      String?   @default("https://example.com/default-profile.png") // Default profile pic
  lastLoggedin    DateTime  @default(now()) // Timestamp of last login
  isActive        Boolean   @default(false) // Account active flag
  isVerified      Boolean   @default(false) // Email/OTP verification
  isTermCondition Boolean   @default(false) // Terms acceptance
  otp             String? // Latest OTP
  otpExpiryTime   DateTime? // OTP expiration
  role            Role      @default(USER) // Role-based access
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @updatedAt // Auto-updated

  // Relations
  addresses     Address[]      @relation("UserAddresses")
  doctor        Doctor?
  patient       Patient?
  admin         Administrator?
  medicineAdmin MedicineAdmin?
  deliveryBoy   DeliveryBoy?

  @@index([email])
  @@index([username])
}

// Physical address for user
model Address {
  id         String @id @default(cuid())
  userId     String
  street     String
  city       String
  state      String
  postalCode String
  country    String

  user User @relation("UserAddresses", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Doctor-specific fields
model Doctor {
  userId         String   @id
  qualification  String[] // Degrees
  experience     Int // Years of experience
  specialization String // Medical field
  slotDate       DateTime // Available date
  slotStart      DateTime // Start time
  slotEnd        DateTime // End time
  city           String
  consultantFees Int // Consultation cost

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("DoctorAppointments")
}

// Patient-specific data
model Patient {
  userId           String   @id
  dob              DateTime // Date of birth
  gender           String
  bloodGroup       String
  emergencyContact String
  medicalHistory   Json // Structured medical history

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointments Appointment[] @relation("PatientAppointments")
}

// Medical appointment model
model Appointment {
  id        String            @id @default(cuid())
  date      DateTime
  time      DateTime
  notes     String? // Optional patient notes
  doctorId  String
  patientId String
  status    AppointmentStatus @default(PENDING)

  doctor  Doctor  @relation("DoctorAppointments", fields: [doctorId], references: [userId], onDelete: Cascade)
  patient Patient @relation("PatientAppointments", fields: [patientId], references: [userId], onDelete: Cascade)

  @@index([doctorId])
  @@index([patientId])
}

// Admin-specific fields
model Administrator {
  userId      String   @id
  permissions String[] // String-based role rights

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Medicine management admin
model MedicineAdmin {
  userId      String   @id
  permissions String[] // Actions allowed

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Delivery agent details
model DeliveryBoy {
  userId      String @id
  vehicleType String // Bike/Car etc.
  vehicleNo   String // Registration number

  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[] @relation("DeliveryOrders")
}

// Medicine delivery order
model Order {
  id             String        @id @default(cuid())
  orderCode      String        @unique
  description    String
  customerName   String
  customerPhone  String
  address        Json // Delivery address
  deliveryDate   DateTime
  placedAt       DateTime      @default(now())
  deliveryStatus OrderStatus   @default(PENDING)
  paymentStatus  PaymentStatus @default(UNPAID)
  notes          String?

  deliveryBoyId String?
  deliveryBoy   DeliveryBoy? @relation("DeliveryOrders", fields: [deliveryBoyId], references: [userId], onDelete: SetNull)
  tracking      Tracking?    @relation("OrderTracking")

  @@index([deliveryBoyId])
}

// Real-time delivery tracking
model Tracking {
  id          String   @id @default(cuid())
  orderId     String   @unique
  lastUpdated DateTime @default(now())
  location    Json // Current GPS or address
  statusNote  String?

  order Order @relation("OrderTracking", fields: [orderId], references: [id], onDelete: Cascade)
}

// OPTIONAL: For normalized permission control (currently commented out)
/**
 * model Permission {
 * id   String @id @default(cuid())
 * name String @unique
 * userPermissions UserPermission[]
 * }
 * model UserPermission {
 * id           String @id @default(cuid())
 * userId       String
 * permissionId String
 * user       User       @relation(fields: [userId], references: [id])
 * permission Permission @relation(fields: [permissionId], references: [id])
 * }
 */
